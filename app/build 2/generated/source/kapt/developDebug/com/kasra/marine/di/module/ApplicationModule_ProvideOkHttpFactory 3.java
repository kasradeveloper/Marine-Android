// Generated by Dagger (https://dagger.dev).
package com.kasra.marine.di.module;

import com.kasra.marine.data.network.OAuthInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideOkHttpFactory implements Factory<OkHttpClient> {
  private final ApplicationModule module;

  private final Provider<OAuthInterceptor> authProvider;

  public ApplicationModule_ProvideOkHttpFactory(ApplicationModule module,
      Provider<OAuthInterceptor> authProvider) {
    this.module = module;
    this.authProvider = authProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttp(module, authProvider.get());
  }

  public static ApplicationModule_ProvideOkHttpFactory create(ApplicationModule module,
      Provider<OAuthInterceptor> authProvider) {
    return new ApplicationModule_ProvideOkHttpFactory(module, authProvider);
  }

  public static OkHttpClient provideOkHttp(ApplicationModule instance, OAuthInterceptor auth) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttp(auth));
  }
}
