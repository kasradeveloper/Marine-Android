// Generated by Dagger (https://dagger.dev).
package com.kasra.marine.di.module;

import com.kasra.marine.data.network.OAuthInterceptor;
import com.kasra.marine.data.prefrences.AppPrefrencesHelper;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideAuthorizationFactory implements Factory<OAuthInterceptor> {
  private final ApplicationModule module;

  private final Provider<AppPrefrencesHelper> appPrefrencesHelperProvider;

  public ApplicationModule_ProvideAuthorizationFactory(ApplicationModule module,
      Provider<AppPrefrencesHelper> appPrefrencesHelperProvider) {
    this.module = module;
    this.appPrefrencesHelperProvider = appPrefrencesHelperProvider;
  }

  @Override
  public OAuthInterceptor get() {
    return provideAuthorization(module, appPrefrencesHelperProvider.get());
  }

  public static ApplicationModule_ProvideAuthorizationFactory create(ApplicationModule module,
      Provider<AppPrefrencesHelper> appPrefrencesHelperProvider) {
    return new ApplicationModule_ProvideAuthorizationFactory(module, appPrefrencesHelperProvider);
  }

  public static OAuthInterceptor provideAuthorization(ApplicationModule instance,
      AppPrefrencesHelper appPrefrencesHelper) {
    return Preconditions.checkNotNullFromProvides(instance.provideAuthorization(appPrefrencesHelper));
  }
}
