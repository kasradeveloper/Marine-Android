// Generated by Dagger (https://dagger.dev).
package com.kasra.marine;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.lifecycle.ViewModelAssistedFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory;
import androidx.hilt.lifecycle.ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import com.kasra.bime.data.room.DataBaseHelper;
import com.kasra.bime.data.room.DataBaseImpl;
import com.kasra.marine.data.network.ApiHelper;
import com.kasra.marine.data.network.ApiHelperImpl;
import com.kasra.marine.data.network.ApiServices;
import com.kasra.marine.data.network.OAuthInterceptor;
import com.kasra.marine.data.prefrences.AppPrefrencesHelper;
import com.kasra.marine.data.prefrences.AppPrefrencesImpl;
import com.kasra.marine.data.repository.BaseRepository;
import com.kasra.marine.data.repository.BaseRepositoryImpl;
import com.kasra.marine.data.repository.user.UserRepository;
import com.kasra.marine.data.repository.user.UserRepositoryImpl;
import com.kasra.marine.data.room.ApplicationDB;
import com.kasra.marine.di.module.ApplicationModule;
import com.kasra.marine.di.module.ApplicationModule_PrividePrefrencesFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideApiFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideApiHelperFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideAuthorizationFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideBaseRepositoryFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideBaseUrlFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideDbFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideDbImplementationFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideOkHttpFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideRetrofitFactory;
import com.kasra.marine.di.module.ApplicationModule_ProvideUserRepositoryFactory;
import com.kasra.marine.ui.MarinViewModel;
import com.kasra.marine.ui.MarinViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kasra.marine.ui.MarineActivity;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMarine_HiltComponents_SingletonC extends Marine_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final ApplicationModule applicationModule;

  private volatile Object appPrefrencesHelper = new MemoizedSentinel();

  private volatile Object oAuthInterceptor = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object apiServices = new MemoizedSentinel();

  private volatile Object apiHelper = new MemoizedSentinel();

  private volatile Object applicationDB = new MemoizedSentinel();

  private volatile Object dataBaseHelper = new MemoizedSentinel();

  private volatile Object baseRepository = new MemoizedSentinel();

  private volatile Object userRepository = new MemoizedSentinel();

  private DaggerMarine_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam,
      ApplicationModule applicationModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.applicationModule = applicationModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private AppPrefrencesImpl appPrefrencesImpl() {
    return new AppPrefrencesImpl(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private AppPrefrencesHelper appPrefrencesHelper() {
    Object local = appPrefrencesHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appPrefrencesHelper;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_PrividePrefrencesFactory.prividePrefrences(applicationModule, appPrefrencesImpl());
          appPrefrencesHelper = DoubleCheck.reentrantCheck(appPrefrencesHelper, local);
        }
      }
    }
    return (AppPrefrencesHelper) local;
  }

  private OAuthInterceptor oAuthInterceptor() {
    Object local = oAuthInterceptor;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = oAuthInterceptor;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideAuthorizationFactory.provideAuthorization(applicationModule, appPrefrencesHelper());
          oAuthInterceptor = DoubleCheck.reentrantCheck(oAuthInterceptor, local);
        }
      }
    }
    return (OAuthInterceptor) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideOkHttpFactory.provideOkHttp(applicationModule, oAuthInterceptor());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideRetrofitFactory.provideRetrofit(applicationModule, okHttpClient(), ApplicationModule_ProvideBaseUrlFactory.provideBaseUrl(applicationModule));
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private ApiServices apiServices() {
    Object local = apiServices;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiServices;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideApiFactory.provideApi(applicationModule, retrofit());
          apiServices = DoubleCheck.reentrantCheck(apiServices, local);
        }
      }
    }
    return (ApiServices) local;
  }

  private ApiHelperImpl apiHelperImpl() {
    return new ApiHelperImpl(apiServices());
  }

  private ApiHelper apiHelper() {
    Object local = apiHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiHelper;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideApiHelperFactory.provideApiHelper(applicationModule, apiHelperImpl());
          apiHelper = DoubleCheck.reentrantCheck(apiHelper, local);
        }
      }
    }
    return (ApiHelper) local;
  }

  private ApplicationDB applicationDB() {
    Object local = applicationDB;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = applicationDB;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideDbFactory.provideDb(applicationModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          applicationDB = DoubleCheck.reentrantCheck(applicationDB, local);
        }
      }
    }
    return (ApplicationDB) local;
  }

  private DataBaseImpl dataBaseImpl() {
    return new DataBaseImpl(applicationDB());
  }

  private DataBaseHelper dataBaseHelper() {
    Object local = dataBaseHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = dataBaseHelper;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideDbImplementationFactory.provideDbImplementation(applicationModule, dataBaseImpl());
          dataBaseHelper = DoubleCheck.reentrantCheck(dataBaseHelper, local);
        }
      }
    }
    return (DataBaseHelper) local;
  }

  private BaseRepositoryImpl baseRepositoryImpl() {
    return new BaseRepositoryImpl(dataBaseHelper(), apiHelper());
  }

  private BaseRepository baseRepository() {
    Object local = baseRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = baseRepository;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideBaseRepositoryFactory.provideBaseRepository(applicationModule, baseRepositoryImpl());
          baseRepository = DoubleCheck.reentrantCheck(baseRepository, local);
        }
      }
    }
    return (BaseRepository) local;
  }

  private UserRepositoryImpl userRepositoryImpl() {
    return new UserRepositoryImpl(apiHelper(), appPrefrencesHelper(), dataBaseHelper(), baseRepository(), oAuthInterceptor());
  }

  private UserRepository userRepository() {
    Object local = userRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = userRepository;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideUserRepositoryFactory.provideUserRepository(applicationModule, userRepositoryImpl());
          userRepository = DoubleCheck.reentrantCheck(userRepository, local);
        }
      }
    }
    return (UserRepository) local;
  }

  @Override
  public void injectMarine(Marine marine) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Marine_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (applicationModule == null) {
        this.applicationModule = new ApplicationModule();
      }
      return new DaggerMarine_HiltComponents_SingletonC(applicationContextModule, applicationModule);
    }
  }

  private final class ActivityRetainedCBuilder implements Marine_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public Marine_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends Marine_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements Marine_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity arg0) {
        this.activity = Preconditions.checkNotNull(arg0);
        return this;
      }

      @Override
      public Marine_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends Marine_HiltComponents.ActivityC {
      private final Activity activity;

      private ActivityCImpl(Activity activityParam) {
        this.activity = activityParam;
      }

      private Set<String> keySetSetOfString() {
        return Collections.<String>singleton(MarinViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      private ViewModelProvider.Factory provideFactory() {
        return ViewModelFactoryModules_ActivityModule_ProvideFactoryFactory.provideFactory(activity, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMarine_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
      }

      private Set<ViewModelProvider.Factory> defaultActivityViewModelFactorySetOfViewModelProviderFactory(
          ) {
        return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
      }

      @Override
      public void injectMarineActivity(MarineActivity marineActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMarine_HiltComponents_SingletonC.this.applicationContextModule), keySetSetOfString(), new ViewModelCBuilder(), defaultActivityViewModelFactorySetOfViewModelProviderFactory(), Collections.<ViewModelProvider.Factory>emptySet());
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements Marine_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment arg0) {
          this.fragment = Preconditions.checkNotNull(arg0);
          return this;
        }

        @Override
        public Marine_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends Marine_HiltComponents.FragmentC {
        private final Fragment fragment;

        private FragmentCImpl(Fragment fragmentParam) {
          this.fragment = fragmentParam;
        }

        private ViewModelProvider.Factory provideFactory() {
          return ViewModelFactoryModules_FragmentModule_ProvideFactoryFactory.provideFactory(fragment, ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMarine_HiltComponents_SingletonC.this.applicationContextModule), Collections.<String, Provider<ViewModelAssistedFactory<? extends ViewModel>>>emptyMap());
        }

        private Set<ViewModelProvider.Factory> defaultFragmentViewModelFactorySetOfViewModelProviderFactory(
            ) {
          return Collections.<ViewModelProvider.Factory>singleton(provideFactory());
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMarine_HiltComponents_SingletonC.this.applicationContextModule), ActivityCImpl.this.keySetSetOfString(), new ViewModelCBuilder(), ActivityCImpl.this.defaultActivityViewModelFactorySetOfViewModelProviderFactory(), defaultFragmentViewModelFactorySetOfViewModelProviderFactory());
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements Marine_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View arg0) {
            this.view = Preconditions.checkNotNull(arg0);
            return this;
          }

          @Override
          public Marine_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends Marine_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements Marine_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View arg0) {
          this.view = Preconditions.checkNotNull(arg0);
          return this;
        }

        @Override
        public Marine_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends Marine_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements Marine_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle arg0) {
        this.savedStateHandle = Preconditions.checkNotNull(arg0);
        return this;
      }

      @Override
      public Marine_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends Marine_HiltComponents.ViewModelC {
      private volatile Provider<MarinViewModel> marinViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private MarinViewModel marinViewModel() {
        return new MarinViewModel(DaggerMarine_HiltComponents_SingletonC.this.userRepository());
      }

      private Provider<MarinViewModel> marinViewModelProvider() {
        Object local = marinViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          marinViewModelProvider = (Provider<MarinViewModel>) local;
        }
        return (Provider<MarinViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>singletonMap("com.kasra.marine.ui.MarinViewModel", (Provider) marinViewModelProvider());
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.kasra.marine.ui.MarinViewModel 
            return (T) ViewModelCImpl.this.marinViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements Marine_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service arg0) {
      this.service = Preconditions.checkNotNull(arg0);
      return this;
    }

    @Override
    public Marine_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends Marine_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
