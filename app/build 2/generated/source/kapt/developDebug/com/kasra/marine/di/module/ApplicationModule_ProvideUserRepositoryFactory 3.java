// Generated by Dagger (https://dagger.dev).
package com.kasra.marine.di.module;

import com.kasra.marine.data.repository.user.UserRepository;
import com.kasra.marine.data.repository.user.UserRepositoryImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final ApplicationModule module;

  private final Provider<UserRepositoryImpl> userRepositoryImplProvider;

  public ApplicationModule_ProvideUserRepositoryFactory(ApplicationModule module,
      Provider<UserRepositoryImpl> userRepositoryImplProvider) {
    this.module = module;
    this.userRepositoryImplProvider = userRepositoryImplProvider;
  }

  @Override
  public UserRepository get() {
    return provideUserRepository(module, userRepositoryImplProvider.get());
  }

  public static ApplicationModule_ProvideUserRepositoryFactory create(ApplicationModule module,
      Provider<UserRepositoryImpl> userRepositoryImplProvider) {
    return new ApplicationModule_ProvideUserRepositoryFactory(module, userRepositoryImplProvider);
  }

  public static UserRepository provideUserRepository(ApplicationModule instance,
      UserRepositoryImpl userRepositoryImpl) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserRepository(userRepositoryImpl));
  }
}
