// Generated by Dagger (https://dagger.dev).
package com.kasra.marine.data.repository.user;

import com.kasra.bime.data.room.DataBaseHelper;
import com.kasra.marine.data.network.ApiHelper;
import com.kasra.marine.data.network.OAuthInterceptor;
import com.kasra.marine.data.prefrences.AppPrefrencesHelper;
import com.kasra.marine.data.repository.BaseRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserRepositoryImpl_Factory implements Factory<UserRepositoryImpl> {
  private final Provider<ApiHelper> apiHelperProvider;

  private final Provider<AppPrefrencesHelper> preferencesProvider;

  private final Provider<DataBaseHelper> dataBaseHelperProvider;

  private final Provider<BaseRepository> baseRepositoryProvider;

  private final Provider<OAuthInterceptor> authProvider;

  public UserRepositoryImpl_Factory(Provider<ApiHelper> apiHelperProvider,
      Provider<AppPrefrencesHelper> preferencesProvider,
      Provider<DataBaseHelper> dataBaseHelperProvider,
      Provider<BaseRepository> baseRepositoryProvider, Provider<OAuthInterceptor> authProvider) {
    this.apiHelperProvider = apiHelperProvider;
    this.preferencesProvider = preferencesProvider;
    this.dataBaseHelperProvider = dataBaseHelperProvider;
    this.baseRepositoryProvider = baseRepositoryProvider;
    this.authProvider = authProvider;
  }

  @Override
  public UserRepositoryImpl get() {
    return newInstance(apiHelperProvider.get(), preferencesProvider.get(), dataBaseHelperProvider.get(), baseRepositoryProvider.get(), authProvider.get());
  }

  public static UserRepositoryImpl_Factory create(Provider<ApiHelper> apiHelperProvider,
      Provider<AppPrefrencesHelper> preferencesProvider,
      Provider<DataBaseHelper> dataBaseHelperProvider,
      Provider<BaseRepository> baseRepositoryProvider, Provider<OAuthInterceptor> authProvider) {
    return new UserRepositoryImpl_Factory(apiHelperProvider, preferencesProvider, dataBaseHelperProvider, baseRepositoryProvider, authProvider);
  }

  public static UserRepositoryImpl newInstance(ApiHelper apiHelper, AppPrefrencesHelper preferences,
      DataBaseHelper dataBaseHelper, BaseRepository baseRepository, OAuthInterceptor auth) {
    return new UserRepositoryImpl(apiHelper, preferences, dataBaseHelper, baseRepository, auth);
  }
}
