// Generated by Dagger (https://dagger.dev).
package com.kasra.marine.di.module;

import com.kasra.bime.data.room.DataBaseHelper;
import com.kasra.bime.data.room.DataBaseImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideDbImplementationFactory implements Factory<DataBaseHelper> {
  private final ApplicationModule module;

  private final Provider<DataBaseImpl> dataBaseImplProvider;

  public ApplicationModule_ProvideDbImplementationFactory(ApplicationModule module,
      Provider<DataBaseImpl> dataBaseImplProvider) {
    this.module = module;
    this.dataBaseImplProvider = dataBaseImplProvider;
  }

  @Override
  public DataBaseHelper get() {
    return provideDbImplementation(module, dataBaseImplProvider.get());
  }

  public static ApplicationModule_ProvideDbImplementationFactory create(ApplicationModule module,
      Provider<DataBaseImpl> dataBaseImplProvider) {
    return new ApplicationModule_ProvideDbImplementationFactory(module, dataBaseImplProvider);
  }

  public static DataBaseHelper provideDbImplementation(ApplicationModule instance,
      DataBaseImpl dataBaseImpl) {
    return Preconditions.checkNotNullFromProvides(instance.provideDbImplementation(dataBaseImpl));
  }
}
