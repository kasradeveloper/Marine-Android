// Generated by Dagger (https://dagger.dev).
package com.kasra.marine.di.module;

import com.kasra.marine.data.repository.BaseRepository;
import com.kasra.marine.data.repository.BaseRepositoryImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideBaseRepositoryFactory implements Factory<BaseRepository> {
  private final ApplicationModule module;

  private final Provider<BaseRepositoryImpl> baseRepositoryImplProvider;

  public ApplicationModule_ProvideBaseRepositoryFactory(ApplicationModule module,
      Provider<BaseRepositoryImpl> baseRepositoryImplProvider) {
    this.module = module;
    this.baseRepositoryImplProvider = baseRepositoryImplProvider;
  }

  @Override
  public BaseRepository get() {
    return provideBaseRepository(module, baseRepositoryImplProvider.get());
  }

  public static ApplicationModule_ProvideBaseRepositoryFactory create(ApplicationModule module,
      Provider<BaseRepositoryImpl> baseRepositoryImplProvider) {
    return new ApplicationModule_ProvideBaseRepositoryFactory(module, baseRepositoryImplProvider);
  }

  public static BaseRepository provideBaseRepository(ApplicationModule instance,
      BaseRepositoryImpl baseRepositoryImpl) {
    return Preconditions.checkNotNullFromProvides(instance.provideBaseRepository(baseRepositoryImpl));
  }
}
